<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.accp.mapper.ordersonMapper" >
  <resultMap id="BaseResultMap" type="com.accp.domain.orderson" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="iid" property="iid" jdbcType="INTEGER" />
    <result column="typeId" property="typeid" jdbcType="INTEGER" />
    <result column="name1" property="name1" jdbcType="VARCHAR" />
    <result column="name2" property="name2" jdbcType="VARCHAR" />
    <result column="name3" property="name3" jdbcType="VARCHAR" />
    <result column="name4" property="name4" jdbcType="VARCHAR" />
    <result column="name5" property="name5" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap type="com.accp.domain.orderson" id="BaseResultMap1" extends="BaseResultMap">
  	 <association property="menus" javaType="com.accp.domain.menu">
  	 	<id column="mid" property="id" jdbcType="INTEGER" />
     	<result column="mname" property="mname" jdbcType="VARCHAR" />
     	<result column="price" property="price" jdbcType="DOUBLE" />
     	<result column="likecount" property="likecount" jdbcType="INTEGER" />
     	<result column="url" property="url" jdbcType="VARCHAR"/>
  	 </association>
  </resultMap>
  
  <resultMap type="com.accp.domain.orderson" id="BaseResultMap2" extends="BaseResultMap">
  	<association property="rooms" javaType="com.accp.domain.room">
  		<id column="rid" property="id" jdbcType="INTEGER" />
  		<result column="rname" property="rname" jdbcType="VARCHAR" />
  		<result column="location" property="location" jdbcType="VARCHAR" />
    	<result column="introduce" property="introduce" jdbcType="VARCHAR" />
    	<result column="rtypeid" property="typeid" jdbcType="INTEGER" />
    	<result column="price" property="price" jdbcType="DOUBLE" />
    	<result column="url" property="url" jdbcType="VARCHAR"/>
  	</association>
  
  </resultMap>
  <select id="queryroomtj" resultMap="BaseResultMap2">
  	SELECT o.*,r.`id`AS rid,r.`rname`,r.`introduce`,r.`location`,r.`price`,r.`typeId`AS rtypeid,i.`url` FROM `orderson` o
		INNER JOIN `room` r ON r.`id`=o.`iid`
		INNER JOIN `images` i ON r.`id`=i.`iid` AND i.`typeId`=3
		WHERE o.typeid=2 AND r.`state`=1
		GROUP BY o.iid
		HAVING COUNT(o.iid)>=2 
		ORDER BY COUNT(o.iid) DESC
		LIMIT 0,6
  </select>
  
  
  <select id="querytj" resultMap="BaseResultMap1">
  		SELECT o.*,m.`mname`,m.`price`,m.`id` AS `mid`,m.`likecount`,i.`url` FROM `orderson` o
		INNER JOIN `menu` m ON m.`id`=o.`iid`
		INNER JOIN `images` i ON m.`id`=i.`iid` AND i.`typeId`=2
		WHERE o.typeid=2
		GROUP BY o.iid
		HAVING COUNT(o.iid)>=2 AND SUM(m.`likecount`)>30
		ORDER BY COUNT(o.iid) DESC
		LIMIT 0,5
  </select>
  
  
   <!--  查询所有类型推荐-->
  <select id="recommdstatic" resultType="com.accp.domain.orderson">
  		SELECT COUNT(iid) as tjcount,iid,typeid FROM `orderson` WHERE typeid=#{typeid}
		GROUP BY iid
		HAVING COUNT(iid)>=2
		ORDER BY COUNT(iid) DESC
		LIMIT 0,5
  </select>
  
   <!--  查询餐饮类型推荐-->
  <select id="recommdstaticmenu" resultType="com.accp.domain.orderson">
  		SELECT COUNT(iid),iid,typeid,SUM(`menu`.`likecount`) FROM `orderson`
		JOIN `menu` ON `menu`.`id`=`orderson`.`iid`
		WHERE typeid=#{typeid}
		GROUP BY iid
		HAVING COUNT(iid)>=2 or SUM(`menu`.`likecount`)>30
		ORDER BY COUNT(iid) DESC
		LIMIT 0,5
  </select>
  
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, iid, typeId, name1, name2, name3, name4, name5
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.accp.domain.ordersonExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from orderson
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from orderson
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from orderson
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.accp.domain.ordersonExample" >
    delete from orderson
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <!-- 新增订单项目排班 -->
  <insert id="insert_project" keyProperty="id" useGeneratedKeys="true" parameterType="com.accp.domain.orderson">
    insert into orderson (iid, typeId, 
      name1, name2, name3, 
      name4, name5)
    values (#{iid,jdbcType=INTEGER}, #{typeid,jdbcType=INTEGER}, 
      #{name1,jdbcType=VARCHAR}, #{name2,jdbcType=VARCHAR}, #{name3,jdbcType=VARCHAR}, 
      #{name4,jdbcType=VARCHAR}, #{name5,jdbcType=VARCHAR})
  </insert>
  
  <insert id="insert" keyProperty="id" useGeneratedKeys="true" parameterType="com.accp.domain.orderson" >
    insert into orderson (id, iid, typeId, 
      name1, name2, name3, 
      name4, name5)
    values (#{id,jdbcType=INTEGER}, #{iid,jdbcType=INTEGER}, #{typeid,jdbcType=INTEGER}, 
      #{name1,jdbcType=VARCHAR}, #{name2,jdbcType=VARCHAR}, #{name3,jdbcType=VARCHAR}, 
      #{name4,jdbcType=VARCHAR}, #{name5,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.accp.domain.orderson" >
    insert into orderson
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="iid != null" >
        iid,
      </if>
      <if test="typeid != null" >
        typeId,
      </if>
      <if test="name1 != null" >
        name1,
      </if>
      <if test="name2 != null" >
        name2,
      </if>
      <if test="name3 != null" >
        name3,
      </if>
      <if test="name4 != null" >
        name4,
      </if>
      <if test="name5 != null" >
        name5,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="iid != null" >
        #{iid,jdbcType=INTEGER},
      </if>
      <if test="typeid != null" >
        #{typeid,jdbcType=INTEGER},
      </if>
      <if test="name1 != null" >
        #{name1,jdbcType=VARCHAR},
      </if>
      <if test="name2 != null" >
        #{name2,jdbcType=VARCHAR},
      </if>
      <if test="name3 != null" >
        #{name3,jdbcType=VARCHAR},
      </if>
      <if test="name4 != null" >
        #{name4,jdbcType=VARCHAR},
      </if>
      <if test="name5 != null" >
        #{name5,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.accp.domain.ordersonExample" resultType="java.lang.Integer" >
    select count(*) from orderson
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update orderson
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.iid != null" >
        iid = #{record.iid,jdbcType=INTEGER},
      </if>
      <if test="record.typeid != null" >
        typeId = #{record.typeid,jdbcType=INTEGER},
      </if>
      <if test="record.name1 != null" >
        name1 = #{record.name1,jdbcType=VARCHAR},
      </if>
      <if test="record.name2 != null" >
        name2 = #{record.name2,jdbcType=VARCHAR},
      </if>
      <if test="record.name3 != null" >
        name3 = #{record.name3,jdbcType=VARCHAR},
      </if>
      <if test="record.name4 != null" >
        name4 = #{record.name4,jdbcType=VARCHAR},
      </if>
      <if test="record.name5 != null" >
        name5 = #{record.name5,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update orderson
    set id = #{record.id,jdbcType=INTEGER},
      iid = #{record.iid,jdbcType=INTEGER},
      typeId = #{record.typeid,jdbcType=INTEGER},
      name1 = #{record.name1,jdbcType=VARCHAR},
      name2 = #{record.name2,jdbcType=VARCHAR},
      name3 = #{record.name3,jdbcType=VARCHAR},
      name4 = #{record.name4,jdbcType=VARCHAR},
      name5 = #{record.name5,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.accp.domain.orderson" >
    update orderson
    <set >
      <if test="iid != null" >
        iid = #{iid,jdbcType=INTEGER},
      </if>
      <if test="typeid != null" >
        typeId = #{typeid,jdbcType=INTEGER},
      </if>
      <if test="name1 != null" >
        name1 = #{name1,jdbcType=VARCHAR},
      </if>
      <if test="name2 != null" >
        name2 = #{name2,jdbcType=VARCHAR},
      </if>
      <if test="name3 != null" >
        name3 = #{name3,jdbcType=VARCHAR},
      </if>
      <if test="name4 != null" >
        name4 = #{name4,jdbcType=VARCHAR},
      </if>
      <if test="name5 != null" >
        name5 = #{name5,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.accp.domain.orderson" >
    update orderson
    set iid = #{iid,jdbcType=INTEGER},
      typeId = #{typeid,jdbcType=INTEGER},
      name1 = #{name1,jdbcType=VARCHAR},
      name2 = #{name2,jdbcType=VARCHAR},
      name3 = #{name3,jdbcType=VARCHAR},
      name4 = #{name4,jdbcType=VARCHAR},
      name5 = #{name5,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>